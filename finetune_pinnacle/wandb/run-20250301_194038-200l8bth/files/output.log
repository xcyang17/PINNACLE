
Namespace(actn='relu', batch_size=None, data_split_path='/scratch/gilbreth/yang1641/exome/data/PINNACLE/therapeutic_target_task/data_split_EFO_0000685', dropout=0, embed='pinnacle', embeddings_dir='/scratch/gilbreth/yang1641/exome/data/PINNACLE/pinnacle_embeds/', hidden_dim_1=64, hidden_dim_2=32, hidden_dim_3=0, lr=0.0001, metrics_output_dir='./tmp_evaluation_results/', models_output_dir='./tmp_model_outputs/', negative_proteins_prefix='/scratch/gilbreth/yang1641/exome/data/PINNACLE/therapeutic_target_task/negative_proteins_EFO_0000685', norm=None, num_epoch=1, order='nd', overwrite=False, positive_proteins_prefix='/scratch/gilbreth/yang1641/exome/data/PINNACLE/therapeutic_target_task/positive_proteins_EFO_0000685', random=False, random_state=1, task_name='EFO_0000685', train_size=0.6, val_size=0.2, wd=0.0001, weigh_loss=False, weigh_sample=False)
Finished reading data, evaluating...
torch.Size([2386, 128])
torch.Size([3099, 128])
torch.Size([2763, 128])
torch.Size([1201, 128])
torch.Size([3171, 128])
torch.Size([1180, 128])
torch.Size([3182, 128])
torch.Size([3036, 128])
torch.Size([3198, 128])
torch.Size([1412, 128])
torch.Size([3312, 128])
torch.Size([1394, 128])
torch.Size([2066, 128])
torch.Size([3247, 128])
torch.Size([3296, 128])
torch.Size([3049, 128])
torch.Size([1837, 128])
torch.Size([1272, 128])
torch.Size([1067, 128])
torch.Size([1772, 128])
torch.Size([1854, 128])
torch.Size([2891, 128])
torch.Size([3151, 128])
torch.Size([2576, 128])
torch.Size([3078, 128])
torch.Size([3039, 128])
torch.Size([2140, 128])
torch.Size([2748, 128])
torch.Size([3112, 128])
torch.Size([2164, 128])
torch.Size([3290, 128])
torch.Size([2952, 128])
torch.Size([2048, 128])
torch.Size([1597, 128])
torch.Size([1296, 128])
torch.Size([3443, 128])
torch.Size([2628, 128])
torch.Size([2821, 128])
torch.Size([2850, 128])
torch.Size([3176, 128])
torch.Size([2907, 128])
torch.Size([2142, 128])
torch.Size([3038, 128])
torch.Size([2163, 128])
torch.Size([1320, 128])
torch.Size([1943, 128])
torch.Size([2818, 128])
torch.Size([1531, 128])
torch.Size([3168, 128])
torch.Size([3312, 128])
torch.Size([2140, 128])
torch.Size([1297, 128])
torch.Size([3197, 128])
torch.Size([2472, 128])
torch.Size([1826, 128])
torch.Size([1990, 128])
torch.Size([3300, 128])
torch.Size([1781, 128])
torch.Size([2919, 128])
torch.Size([3024, 128])
torch.Size([2748, 128])
torch.Size([2952, 128])
torch.Size([3101, 128])
torch.Size([1578, 128])
torch.Size([1435, 128])
torch.Size([2585, 128])
torch.Size([3072, 128])
torch.Size([1153, 128])
torch.Size([3239, 128])
torch.Size([2848, 128])
torch.Size([1557, 128])
torch.Size([2844, 128])
torch.Size([2866, 128])
torch.Size([3217, 128])
torch.Size([2909, 128])
torch.Size([2323, 128])
torch.Size([3065, 128])
torch.Size([1215, 128])
torch.Size([3203, 128])
torch.Size([2747, 128])
torch.Size([2472, 128])
torch.Size([2738, 128])
torch.Size([3094, 128])
torch.Size([2627, 128])
torch.Size([1908, 128])
torch.Size([3023, 128])
torch.Size([3113, 128])
torch.Size([2988, 128])
torch.Size([1103, 128])
torch.Size([1450, 128])
torch.Size([3299, 128])
torch.Size([2746, 128])
torch.Size([1920, 128])
torch.Size([2834, 128])
torch.Size([3211, 128])
torch.Size([2606, 128])
torch.Size([2866, 128])
torch.Size([2833, 128])
torch.Size([2356, 128])
torch.Size([2206, 128])
torch.Size([3196, 128])
torch.Size([3258, 128])
torch.Size([3337, 128])
torch.Size([2026, 128])
torch.Size([2807, 128])
torch.Size([2478, 128])
torch.Size([2429, 128])
torch.Size([1080, 128])
torch.Size([1291, 128])
torch.Size([1457, 128])
torch.Size([1393, 128])
torch.Size([2986, 128])
torch.Size([2629, 128])
torch.Size([2247, 128])
torch.Size([2742, 128])
torch.Size([2869, 128])
torch.Size([3054, 128])
torch.Size([1397, 128])
torch.Size([3110, 128])
torch.Size([1965, 128])
torch.Size([2695, 128])
torch.Size([2986, 128])
torch.Size([3178, 128])
torch.Size([3041, 128])
torch.Size([2545, 128])
torch.Size([2784, 128])
torch.Size([3384, 128])
torch.Size([2246, 128])
torch.Size([3092, 128])
torch.Size([2939, 128])
torch.Size([2361, 128])
torch.Size([2832, 128])
torch.Size([3176, 128])
torch.Size([1461, 128])
torch.Size([2225, 128])
torch.Size([3424, 128])
torch.Size([3015, 128])
torch.Size([3134, 128])
torch.Size([2954, 128])
torch.Size([2741, 128])
torch.Size([1862, 128])
torch.Size([1804, 128])
torch.Size([3186, 128])
torch.Size([2635, 128])
torch.Size([3091, 128])
torch.Size([2028, 128])
torch.Size([2747, 128])
torch.Size([1382, 128])
torch.Size([2965, 128])
torch.Size([3158, 128])
torch.Size([3031, 128])
torch.Size([1007, 128])
torch.Size([2975, 128])
torch.Size([3228, 128])
torch.Size([2495, 128])
torch.Size([3070, 128])
Checking for... /scratch/gilbreth/yang1641/exome/data/PINNACLE/therapeutic_target_task/data_split_EFO_0000685.json
Data split file found. Loading data splits...
Finished loading data splits.
/scratch/gilbreth/yang1641/exome/data/PINNACLE/therapeutic_target_task/data_split_EFO_0000685_name.json
[34m[1mwandb[39m[22m: [32m[41mERROR[39m[49m You must call wandb.init() before wandb.config["norm"]
Traceback (most recent call last):
  File "train.py", line 127, in <module>
    main(args, hparams, wandb)
  File "train.py", line 100, in main
    positive_proportion_train, positive_proportion_test, auroc_scores, ap_scores = run_finetune(embed, celltype_dict, celltype_protein_dict, positive_proteins, negative_proteins, data_split_path, random_state, models_output_dir, args.embed, hparams, args.batch_size, args.num_epoch, args.train_size, args.val_size, args.weigh_sample, args.weigh_loss)
  File "train.py", line 23, in run_finetune
    clf, best_epoch, best_val_auprc, train_ranks, val_ranks = finetune_train_stage(X_train, y_train, random_state, groups_train, cts_train, hparams, train_size, val_size, num_epoch, batch_size, weigh_sample, weigh_loss, models_output_dir, embed_name)
  File "train.py", line 46, in finetune_train_stage
    clf, best_train_y, best_train_preds, best_train_cts, best_train_groups, cts_map_train, groups_map_train, best_val_y, best_val_preds, best_val_cts, best_val_groups, cts_map_val, groups_map_val, best_epoch, best_val_auprc = training_and_validation(X_train[train_indices], X_train[val_indices], torch.Tensor(y_train)[train_indices], torch.Tensor(y_train)[val_indices], np.array(cts_train)[train_indices], np.array(cts_train)[val_indices], np.array(groups_train)[train_indices], np.array(groups_train)[val_indices], num_epoch, batch_size, weigh_sample, weigh_loss, hparams)
  File "/home/yang1641/PINNACLE/finetune_pinnacle/train_utils.py", line 55, in training_and_validation
    if (hparams[norm] == "bn" or hparams[norm] == "ln") and len(train_dataset) % batch_size < 3:
  File "/home/yang1641/.conda/envs/pinnacle/lib/python3.8/site-packages/wandb/sdk/lib/preinit.py", line 14, in __getitem__
    raise wandb.Error(f'You must call wandb.init() before {self._name}["{key}"]')
wandb.errors.Error: You must call wandb.init() before wandb.config["norm"]
Traceback (most recent call last):
  File "train.py", line 127, in <module>
    main(args, hparams, wandb)
  File "train.py", line 100, in main
    positive_proportion_train, positive_proportion_test, auroc_scores, ap_scores = run_finetune(embed, celltype_dict, celltype_protein_dict, positive_proteins, negative_proteins, data_split_path, random_state, models_output_dir, args.embed, hparams, args.batch_size, args.num_epoch, args.train_size, args.val_size, args.weigh_sample, args.weigh_loss)
  File "train.py", line 23, in run_finetune
    clf, best_epoch, best_val_auprc, train_ranks, val_ranks = finetune_train_stage(X_train, y_train, random_state, groups_train, cts_train, hparams, train_size, val_size, num_epoch, batch_size, weigh_sample, weigh_loss, models_output_dir, embed_name)
  File "train.py", line 46, in finetune_train_stage
    clf, best_train_y, best_train_preds, best_train_cts, best_train_groups, cts_map_train, groups_map_train, best_val_y, best_val_preds, best_val_cts, best_val_groups, cts_map_val, groups_map_val, best_epoch, best_val_auprc = training_and_validation(X_train[train_indices], X_train[val_indices], torch.Tensor(y_train)[train_indices], torch.Tensor(y_train)[val_indices], np.array(cts_train)[train_indices], np.array(cts_train)[val_indices], np.array(groups_train)[train_indices], np.array(groups_train)[val_indices], num_epoch, batch_size, weigh_sample, weigh_loss, hparams)
  File "/home/yang1641/PINNACLE/finetune_pinnacle/train_utils.py", line 55, in training_and_validation
    if (hparams[norm] == "bn" or hparams[norm] == "ln") and len(train_dataset) % batch_size < 3:
  File "/home/yang1641/.conda/envs/pinnacle/lib/python3.8/site-packages/wandb/sdk/lib/preinit.py", line 14, in __getitem__
    raise wandb.Error(f'You must call wandb.init() before {self._name}["{key}"]')
wandb.errors.Error: You must call wandb.init() before wandb.config["norm"]